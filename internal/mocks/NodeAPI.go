// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	perun "github.com/hyperledger-labs/perun-node"
	mock "github.com/stretchr/testify/mock"
)

// NodeAPI is an autogenerated mock type for the NodeAPI type
type NodeAPI struct {
	mock.Mock
}

// GetConfig provides a mock function with given fields:
func (_m *NodeAPI) GetConfig() perun.NodeConfig {
	ret := _m.Called()

	var r0 perun.NodeConfig
	if rf, ok := ret.Get(0).(func() perun.NodeConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(perun.NodeConfig)
	}

	return r0
}

// GetSession provides a mock function with given fields: _a0
func (_m *NodeAPI) GetSession(_a0 string) (perun.SessionAPI, error) {
	ret := _m.Called(_a0)

	var r0 perun.SessionAPI
	if rf, ok := ret.Get(0).(func(string) perun.SessionAPI); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(perun.SessionAPI)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Help provides a mock function with given fields:
func (_m *NodeAPI) Help() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// OpenSession provides a mock function with given fields: configFile
func (_m *NodeAPI) OpenSession(configFile string) (string, error) {
	ret := _m.Called(configFile)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(configFile)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(configFile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Time provides a mock function with given fields:
func (_m *NodeAPI) Time() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}
