// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	io "io"

	client "perun.network/go-perun/client"

	mock "github.com/stretchr/testify/mock"

	wire "perun.network/go-perun/wire"
)

// ChannelProposal is an autogenerated mock type for the ChannelProposal type
type ChannelProposal struct {
	mock.Mock
}

// Decode provides a mock function with given fields: _a0
func (_m *ChannelProposal) Decode(_a0 io.Reader) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Reader) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Encode provides a mock function with given fields: _a0
func (_m *ChannelProposal) Encode(_a0 io.Writer) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Writer) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Proposal provides a mock function with given fields:
func (_m *ChannelProposal) Proposal() *client.BaseChannelProposal {
	ret := _m.Called()

	var r0 *client.BaseChannelProposal
	if rf, ok := ret.Get(0).(func() *client.BaseChannelProposal); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.BaseChannelProposal)
		}
	}

	return r0
}

// Type provides a mock function with given fields:
func (_m *ChannelProposal) Type() wire.Type {
	ret := _m.Called()

	var r0 wire.Type
	if rf, ok := ret.Get(0).(func() wire.Type); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(wire.Type)
	}

	return r0
}
