// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	channel "perun.network/go-perun/channel"
	client "perun.network/go-perun/client"

	context "context"

	mock "github.com/stretchr/testify/mock"

	wire "perun.network/go-perun/wire"
)

// Channel is an autogenerated mock type for the Channel type
type Channel struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Channel) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ID provides a mock function with given fields:
func (_m *Channel) ID() [32]byte {
	ret := _m.Called()

	var r0 [32]byte
	if rf, ok := ret.Get(0).(func() [32]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([32]byte)
		}
	}

	return r0
}

// Idx provides a mock function with given fields:
func (_m *Channel) Idx() uint16 {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// IsClosed provides a mock function with given fields:
func (_m *Channel) IsClosed() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// OnUpdate provides a mock function with given fields: cb
func (_m *Channel) OnUpdate(cb func(*channel.State, *channel.State)) {
	_m.Called(cb)
}

// Params provides a mock function with given fields:
func (_m *Channel) Params() *channel.Params {
	ret := _m.Called()

	var r0 *channel.Params
	if rf, ok := ret.Get(0).(func() *channel.Params); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*channel.Params)
		}
	}

	return r0
}

// Peers provides a mock function with given fields:
func (_m *Channel) Peers() []wire.Address {
	ret := _m.Called()

	var r0 []wire.Address
	if rf, ok := ret.Get(0).(func() []wire.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]wire.Address)
		}
	}

	return r0
}

// Phase provides a mock function with given fields:
func (_m *Channel) Phase() channel.Phase {
	ret := _m.Called()

	var r0 channel.Phase
	if rf, ok := ret.Get(0).(func() channel.Phase); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(channel.Phase)
	}

	return r0
}

// Register provides a mock function with given fields: ctx
func (_m *Channel) Register(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Settle provides a mock function with given fields: ctx, isSecondary
func (_m *Channel) Settle(ctx context.Context, isSecondary bool) error {
	ret := _m.Called(ctx, isSecondary)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) error); ok {
		r0 = rf(ctx, isSecondary)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// State provides a mock function with given fields:
func (_m *Channel) State() *channel.State {
	ret := _m.Called()

	var r0 *channel.State
	if rf, ok := ret.Get(0).(func() *channel.State); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*channel.State)
		}
	}

	return r0
}

// UpdateBy provides a mock function with given fields: ctx, update
func (_m *Channel) UpdateBy(ctx context.Context, update func(*channel.State) error) error {
	ret := _m.Called(ctx, update)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(*channel.State) error) error); ok {
		r0 = rf(ctx, update)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Watch provides a mock function with given fields: _a0
func (_m *Channel) Watch(_a0 client.AdjudicatorEventHandler) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(client.AdjudicatorEventHandler) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
