// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	channel "perun.network/go-perun/channel"

	mock "github.com/stretchr/testify/mock"

	wallet "perun.network/go-perun/wallet"
)

// Channel is an autogenerated mock type for the Channel type
type Channel struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Channel) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ID provides a mock function with given fields:
func (_m *Channel) ID() [32]byte {
	ret := _m.Called()

	var r0 [32]byte
	if rf, ok := ret.Get(0).(func() [32]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([32]byte)
		}
	}

	return r0
}

// Idx provides a mock function with given fields:
func (_m *Channel) Idx() uint16 {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// Peers provides a mock function with given fields:
func (_m *Channel) Peers() []wallet.Address {
	ret := _m.Called()

	var r0 []wallet.Address
	if rf, ok := ret.Get(0).(func() []wallet.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]wallet.Address)
		}
	}

	return r0
}

// Settle provides a mock function with given fields: _a0
func (_m *Channel) Settle(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// State provides a mock function with given fields:
func (_m *Channel) State() *channel.State {
	ret := _m.Called()

	var r0 *channel.State
	if rf, ok := ret.Get(0).(func() *channel.State); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*channel.State)
		}
	}

	return r0
}

// UpdateBy provides a mock function with given fields: _a0, _a1
func (_m *Channel) UpdateBy(_a0 context.Context, _a1 func(*channel.State)) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(*channel.State)) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Watch provides a mock function with given fields:
func (_m *Channel) Watch() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
