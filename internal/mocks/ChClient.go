// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	client "perun.network/go-perun/client"

	log "perun.network/go-perun/log"

	mock "github.com/stretchr/testify/mock"

	persistence "perun.network/go-perun/channel/persistence"

	wallet "perun.network/go-perun/wallet"
)

// ChClient is an autogenerated mock type for the ChClient type
type ChClient struct {
	mock.Mock
}

// Channel provides a mock function with given fields: _a0
func (_m *ChClient) Channel(_a0 [32]byte) (*client.Channel, error) {
	ret := _m.Called(_a0)

	var r0 *client.Channel
	if rf, ok := ret.Get(0).(func([32]byte) *client.Channel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Channel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([32]byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *ChClient) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnablePersistence provides a mock function with given fields: _a0
func (_m *ChClient) EnablePersistence(_a0 persistence.PersistRestorer) {
	_m.Called(_a0)
}

// Handle provides a mock function with given fields: _a0, _a1
func (_m *ChClient) Handle(_a0 client.ProposalHandler, _a1 client.UpdateHandler) {
	_m.Called(_a0, _a1)
}

// Log provides a mock function with given fields:
func (_m *ChClient) Log() log.Logger {
	ret := _m.Called()

	var r0 log.Logger
	if rf, ok := ret.Get(0).(func() log.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.Logger)
		}
	}

	return r0
}

// OnNewChannel provides a mock function with given fields: handler
func (_m *ChClient) OnNewChannel(handler func(*client.Channel)) {
	_m.Called(handler)
}

// ProposeChannel provides a mock function with given fields: _a0, _a1
func (_m *ChClient) ProposeChannel(_a0 context.Context, _a1 client.ChannelProposal) (*client.Channel, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *client.Channel
	if rf, ok := ret.Get(0).(func(context.Context, client.ChannelProposal) *client.Channel); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Channel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, client.ChannelProposal) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: offChainAddr, commAddr
func (_m *ChClient) Register(offChainAddr wallet.Address, commAddr string) {
	_m.Called(offChainAddr, commAddr)
}

// Restore provides a mock function with given fields: _a0
func (_m *ChClient) Restore(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
